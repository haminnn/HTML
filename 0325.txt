함수
- JavaScript의 함수는 전혀 별개의 문법적 기능이 아니라 Number,String 등과 동등한 객체이다.
- 함수에 Number, String 등을 전달할 수 있는 것처럼 매개변수로 함수 자체도 전달할 수 있다.
- 다른 코드의 인수로 넘겨주는 실행 가능한 코드를 콜백(Callback)이라 한다.
- 내부 계산로직을 모를 때 데이터를 입력받아서 출력하고자 할 때, UI관련 로직을 만들 때 콜백함수가 많이 사용된다.


객체 : 정보를 관리하기 위해 의미를 부여하고 분류하는 논리적 단위

- 객체는 속성을 가지고 있으며 속성은 다음과 같이 분류된다.
	Property : 객체가 관리하는 정보
	Method : 객체가 수행할 수 있는 기능(객체가 가지고 있는 함수)
-객체의 생성
	const person = new Object();
	person.name = "홍길동";
	person.job = "도적";
	person.showInfo = function() {
		console.log("Name: " + this.name);
		console.log("job: " + this.job);
	}
	person.showInfo();

동적type이기때문에 동적으로 속성 추가가 가능하고 클래스를 따로 부여하지 않아도 된다.

JSON을 이용한 객체의 생성
JSON(JavaScript Object Notation)
- JavaScript에서 객체를 표기하기 위한 표기법
- 어떤 객체이던 표기할 수 있고 바로 생성 가능
- XML은 까다롭고 오류도 많기에 JSON을 많이 사용한다.
- KEY:VALUE의 쌍으로 attribute 구성, 콤마(,) 사용에 유의
	const person = {
		name : "홍길동",
		job : "도적",
		showInfo : function() {
			console.log("Name: " + this.name);
		console.log("job: " + this.job);
		}
	}
	person.showInfo();

JaveScript: prototype 기반 상속
- 객체지향언어가 아닌 객체기반언어 
- prototype 기반의 상속을 이용, 객체지향의 특성을 구현할 수 있다(속성 공유)
	const Member = function(name, position) {
		this.name = name;
		this.position = position;
	};
	Member.prototype.team = "상북";
	Member.prototype.introduce = function() {
		console.log("Name:" + this.name);
		console.log("Position:" + this.position);
	}
	const m1 = new Member("강백호", "PF");
	const m2 = new Member("서태웅", "SF");
	m1.introduce();
	m2.introduce();

Binding : call, apply, bind
- JavaScript의 this
	자바스크립트 코드의 실행 컨텍스트자체를 의미
	실행 상황에 따라 this가 가리키는 객체는 바뀔 수 있다.
	함수가 호출되었을 때 그 함수가 속해 있던 객체를 참조


JavaScript의 객체 : 내장 객체 Array
-Array : 하나의 변수에 여러 개의 값을 저장하기 위한 JavaScript의 내장 객체
	JavaScript의 Array는 인덱스의 범위를 엄격하게 체크하지 않으며 C계열의 배열에 비해 다양한 방식으로 작동
	배열의 생성 : 배열 객체를 이용한 생성
	배열의 생성 : 리터럴
	배열은 JavaScript에서 가장 활용도가 높은 범용 객체

Array와 객체의 관계
	객체의 속성에 접근할 때, 다음과 같이 배열처럼 접근할 수 있음
	const person ={
		name: "홍길동",
		job: "도적"
	};
	console.log(person['name'] + ":" + person['job']);

- Array 주요 메소드
------------------------------------------------------------------------------------------------
	메소드 				설명
------------------------------------------------------------------------------------------------
concat			여러 배열을 하나로 연결
------------------------------------------------------------------------------------------------
join(str) 			배열 내의 객체들을 str 구분자를 가지는 하나의 문자열로 변환
------------------------------------------------------------------------------------------------
pop() 			배열의 맨 마지막 객체를 추출(추출된 객체는 삭제)
------------------------------------------------------------------------------------------------
push(item1, ...) 		배열의 맨 마지막에 객체들을 추가
------------------------------------------------------------------------------------------------
reverse() 			배열의 순서를 뒤집음
------------------------------------------------------------------------------------------------
shift() 			배열의 맨 처음 객체를 추출(추출된 객체는 삭제)
------------------------------------------------------------------------------------------------
slice() 			배열의 일부분만을 추출하여 새 배열을 만듦
------------------------------------------------------------------------------------------------
sort(function) 		배열을 정렬
------------------------------------------------------------------------------------------------
splice(start[, count]) 	원하는 index위치의 요소를 삭제하거나 추가
------------------------------------------------------------------------------------------------
split()			특정 구분자를 기준으로 문자열을 분리해서 Array로 만듦
------------------------------------------------------------------------------------------------
forEach()			배열의 개별 요소들을 추출하여 콜백 함수로 넘겨줌
------------------------------------------------------------------------------------------------


JavaScript의 객체 : 내장 객체 Date
- Date 객체는 날짜와 시간을 다루는 객체
	let now = new Date();
	console.log(now);
- Date 객체를 생성하는 다양한 생성자

- Date 내장 메소드
-------------------------------------------------------------------------
	메소드 				설명
-------------------------------------------------------------------------
getYear() / setYear()		년도(기준 1900년)
-------------------------------------------------------------------------
getMonth() / setMonth()		월= 0부터 시작
-------------------------------------------------------------------------
getDate() / setDate()		일
-------------------------------------------------------------------------
getDay() / setDay()			요일= 0: 일요일 ~ 6: 토요일
-------------------------------------------------------------------------
getHours() / setHours()		시
-------------------------------------------------------------------------
getMInutes() / setMinutes()		분
-------------------------------------------------------------------------


Class
- 기존 자바스크립트는 클래스 표현식 없이 prototype으로 클래스를 다룸
- ES6에서는 클래스 정의 문법으로 클래스를 정의, 사용가능
- constructor : 생성자
- static : 정적 멤버
	class Shape{
		static create(x, y){
			return new shape(x, y);
		}
		name = "Shape";
		constructor(x, y){
			this.name = "Shape";
			this.move(x, y);
		}
		move(x, y){
			this.x = x;
			this.y = y;
		}
		area(){
		        	return undefined;
		 }
	}


Array
-every, some
	특정 조건을 만족하는지 배열 내부 원소를 순화하면서 검사
	조건에 만족하면 true 아니면 false
	배열 내부 원소의 값에 대해 검토가 필요한 경우 사용

-filter : 배열의 요소들을 특정 조건을 기준으로 필터링하여 새로운 배열로 반환
	배열에서 필요한 것만 남김
	let source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	let result = source.filter( item => item % 2 == 0 );
				필터링 조건을 콜백 함수로

-map : 배열의 요소들을 콜백함수에 전달하여 새로운 배열을 만듦
	배열의 각 요소를 변형하는 역할을 수행
	let source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	let multiply = source.map(item => item * 2);

-reduce : map이 배열의 각 요소를 변형한다면, reduce는 배열 자체를 변형함
	일반적으로 배열을 값 하나로 줄인다.
	Basic Syntax
	callback
	- previousValue :
	- currentValue :
	- 

전개 연산자
나열형 자료를 추출하거나 연결할 때 사용
- 사용법 : 배열이나 객체, 변수명 앞에 ...를 입력
- 제약: 배열, 객체, 함수 인자표현식([],{},()) 안에서만 활용 가능

배열의 연결
const arr1 = ['홍길동', '장길산'];
const arr2 = ['임꺽정', '전우치'];
const combined = [...arr1, ...arr2];
console.log("ES6 combine", combined)

배열의 전개 1
let [ first, second, third = "empty", ...others ] = arr1;
console.log(first, second, third, others);

배열의 전개 2
let [ first, second, third = "empty", ...others ] = combined;
console.log(first, second, third, others);

객체 전개 연산
-객체의 키나 값을 추출할 때 활용 가능
let obj1 = {one: 1, two: 2, other: 0};
let obj2 = { three:3, four: 4, other: -1};
combined ={
    ...obj1,
    ...obj2,
}
console.log("combined obj1, obj2:", combined)
-객체 전개





	

