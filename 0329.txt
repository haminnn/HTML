* Ajax 통신의 개념
Ajax(Asynchronous JavaScript and XML)
- 웹에서 화면을 갱신하여 데이터를 전달하지 않고, 서버로부터 필요한 데이터만 요청하여 받은 응답을 현재 화면에 갱신하는 방법
- 브라우저에서는 새 페이지를 다시 로드하지 않고, 서버로 보낼 데이터를 Ajax Engine을 이용, 서버로 전송
- Ajax Engine에서는 JavaScript를 통해 DOM을 사용하에 XMLHttpRequest 객체로 데이터를 전송
- XMLHttpRequest 객체를 이용해서 비동기 방식으로 서버로부터 자료를 조회할 수 있다
- 서버에서는 데이터를 전달할 때 전체 헤이지의 HTML을 전달하지 않고 데이터(Text, XML, JSON 등), 혹은 화면의 일부에 해당하는 HTML 조각을 전달한다.
- 브라우저는 전달 받은 데이터 혹은 HTML 조각을 현재 화면에 수정 반영한다.

* Ajax 통신의 특징
Ajax 통신의 장단점
장점
- Ajax 통신을 사용하지 않은 웹페이지에서는 서버로 요청을 보낼 때마다 화면 전체를 생신하게 되지만, Ajax는 화면의 일부만 갱신하는 방법을 이용, 자원 낭비를 최소화
- 사용자가 화면 내에서 진행중인 작업을 초기화하지 않아도 된다(작업의 연속성 확보)
- 서버에 핵심 데이터만 전송하므로 서버에 부담이나 속도 문제를 해결할 수 있다.

단점
- 브라우저의 버전이 낮거나 Ajax를 지원하지 않는 브라우저에서는 사용할 수 없다.
- 화면의 이동 없이 데이터를 송/수신하므로 보안상의 문제를 일으킬 수 있다.
- 디버깅이 쉽지 않다.

* Ajax 통신의 구조
jQuery에서 Ajax 통신의 흐름도
Ajax Engine < JavaScript < Client <-> XMLHttpRequest <-> Server(Text, XML, JSON, HTML ...)

* jQuery Ajax 통신 메소드
	$.ajax(options)

- option으로 넘길 인자는 JavaScript Object 형식으로 작성, 인자는 가변적임
----------------------------------------------------------------------
인자			설명
----------------------------------------------------------------------
url		Ajax 요청을 전송할 주소 URL
----------------------------------------------------------------------
type		서버로 데이터를 전송할 방식 지정(GET, POST)
----------------------------------------------------------------------
data		서버로 전달할 데이터
----------------------------------------------------------------------
dataType		서버가 반환하는 데이터 타입
----------------------------------------------------------------------
success		Ajax 통신이 성공했을 시 실행할 골백 함수
----------------------------------------------------------------------
error		Ajax 통신이 실패했을 시 실행할 골백 함수
----------------------------------------------------------------------

npm install
npm start
http:/localhost:3000
http://localhost:3000/movies -> 영화목록
http://localhost:3000/movies/1 -> 개별 영화 정보
http:/localhost:3000/images/toystory.jpeg -> 포스터 이미지


Website Decoration with Bootstrap
반응형 웹디자인(Responsive Web Design : Concept)
- 웹 초창기의 웹 디자인
	- 일반적으로 pc용 웹 브라우저로 접속
	- 당시 점유율이 높았던 Netscape, Internet Explorer에 잘 보이도록 하는 것이 목표
- 대안 브라우저 등장 이후의 웹 디자인
	- 파이어폭스, 크롬, 오페라 등
	- 주요 브라우저에 똑같이 동학하도록 만드는 것이 목표
- 스마트폰 등장 이후의 웹 디자인
	- 다양한 스크린 사이즈를 가진 장치들의 등장
-다양한 화면 사이즈에 대응하기 위한 움직임
	- 많이 활용되는 화면 크기에 맞는 웹 페이지를 별도로 만든다.
	문제점
	- 스마트폰 스크린 사이즈의 다양화
	- 스마트패드, 스마트tv, 게임 콘솔 등 인터넷에 접속할 수 있는 기기 종류의 다양화
	- 다양해진 스크린 사이즈에 맞는 개별 웹 페이지를 모두 제작할 수는 없다.
- 데이터를 표시하는 단 하나의 웹 페이지를 작성
- 사용자가 접속하는 기기에 맞춰 화면 및 요소들의 크기를 조정, 모든 기기에 최적화된 화면 레이아웃을 보여주자!(responsive 반응형)
- Responsive Web Design 체험해보기
	- Responsive Web Design Database : http://rwdb.kr/
	- Media Queries : https://mediaqueri.es/
	- 브라우저 개발자 도구의 디바이스 모드 활용하여 데트스
- Responsive Web Design으로 얻게 되는 장점
	- 기기의 화면 크기나 해상도에 구애받지 않음
	- 모든 장치에 적합한 웹 사이트를 별도 구축하지 않아도 된다.
- Responsive Web Design의 단점
	- 이전 브라우저 버전과 호환성의 문제가 있을 수 있다.
	- 사이트 디자인이 단순
- Adaptive Web Design(AWD)
	- 서버 혹은 브라우저에서 사용자의 브라우저를 체크, 그에 적합한 Resource들을 별도로 불러오거나, 적절한 레이아웃을 개별 구성
	- 반응형 웹이 레이아웃을 재배치하는 개념이라면 적응형 웹은 기기에 따라 별도의 레이아웃과 리소스를 사용하므로 보다 세밀한 부분까지 조정 가능

미디어 쿼리와 뷰포트
Media Query
- CSS3의 모듈 중 하나, 사이트에 접속하는 기기별로 적용할 CSS를 다르게 지정해주는 기술
뷰포트
- 사용자의 장치에서 실제 콘텐츠가 표시되는 부분을 가리키는 용어
- pc의 1px와 스마트폰의 1px은 다르다
	: 같은 너비 기준을 pc와 스마트폰에 동일하게 적용해서는 안된다
	: 해결책은 스마트폰 화면을 웹 문서 너비에 맞추는 것이 아니라 웹 문서의 콘텐츠를 스마트폰의 화면 너비에 맞춰야 한다.

뷰포트의 설정(예)
<meta name="viewport" content="width=device-width, initial-scale=1">

viewport 메타 태그의 속성
-----------------------------------------------------------------------------------------------------
속성명				내용
-----------------------------------------------------------------------------------------------------
width			뷰포트의 너비
-----------------------------------------------------------------------------------------------------
height			뷰포트의 높이
-----------------------------------------------------------------------------------------------------
initial-scale		초기 배율, 기본값은 1
-----------------------------------------------------------------------------------------------------
user-scalable		사용자가 페이지를 확대, 축소할 수 있는지 여부 지정, 기본값은 yes
-----------------------------------------------------------------------------------------------------
minimum-scale		
-----------------------------------------------------------------------------------------------------
maximum-scale		
-----------------------------------------------------------------------------------------------------
targer-densityDpi		
-----------------------------------------------------------------------------------------------------

미디어 쿼리 구문
- 미디어 쿼리를 사용하기 위해서는 style 태그 안에 다음과 같은 구문을 선언
	@media [only | not] media-type and (media-feature)
- 혹은 외부 CSS를 link로 연결할 때, 장치별로 다른 리소스를 불러올 수 있다.
	<link rel="stylesheet"
		media=

-----------------------------------------------------------------------------------------------------
	조건					설명
-----------------------------------------------------------------------------------------------------
	width
            -------------------------------------------------------------------------------------------
	height
            -------------------------------------------------------------------------------------------
	device-width
            -------------------------------------------------------------------------------------------
디스	device-height
            -------------------------------------------------------------------------------------------
플레이	orientation
            -------------------------------------------------------------------------------------------
	aspect-ratio
            -------------------------------------------------------------------------------------------
	device-aspect-ratio
            -------------------------------------------------------------------------------------------
	resolution
-----------------------------------------------------------------------------------------------------
색상	color
관련       -------------------------------------------------------------------------------------------
	color-index
-----------------------------------------------------------------------------------------------------

CSS Framework
- 반응형 웹이 대중화되면서 반응형 웹을 만드는 기본 기술인 가변 그리드와 미디어 쿼리를 쉽게 사용하기 위한 Framework들이 다수 등장
- Foundation, Skeleton, Bootstrap 등
Bootstrap 사용의 장점
- 반응형 그리드 시스템을 손쉽게 사용할 수 있고록 설계
- 다양한 컴포넌트, Javascript 라이브러리를 포함
- 여러 가지 플러그인을 활용해 손쉽게 기능을 확장할 수 있음
- Twitter의 주도로 작성되어 신뢰도와 품질이 높고 레퍼런스가 다양하다

방법1. 다운로드해서 링크
- 부트스크랩 공식 사이트(https://getbootstrap.com/)에서 직접 파일을 다운로드하여 웹 콘텐트 영역의 적절한 위치에 복사하여 사용
- http://bootstrapk.com/ 페이지에서 v3의 한글 메뉴얼을 확인할 수 있음

방법2. CDN으로 링크(추천)

부트스트랩 홈페이지 > Documentation > Starter Template 항목을 확인
- 부트스트랩 페이지의 구조를 확인
- Bootstrap의 CSS, JSON이 제대로 연결되었는지 확인

Bootstrap Layout : container
부트스트랩은 반응형 웹 구현을 위해 12컬럼 그리드 시스템을 이용
- 부트스트랩에는 CSS가 미리 정의되어 있어, 클래스 스타일을 잘 이해하면 다양한 장치에 적합한 반응형 웹 레이아웃을 손쉽게 만들 수 있음
- bootstrap.css의 container 클래스 선언부를 확인해 본다
- Q > 부트스트랩이 활용하는 중단점은 각각 몇 px 입니까?
@media ( min-width: 576 px) {
	.container{ max-width: 540px;}
	}
@media ( min-width: 768 px) {
	.container{ max-width: 720px;}
	}
@media ( min-width: 992 px) {
	.container{ max-width: 960px;}
	}
@media ( min-width: 1200 px) {
	.container{ max-width: 1140px;}
	}

container 클래스
- 화면의 폭에 따라 변화하며 최대 1140px 사이즈
- 좌우에 15px씩의 padding
container-fluid
- 화면의 가로폭 전체를 사용
- 좌우에 15px씩의 padding
주의할 점
두 가지 형태의 container를 중첩해서 사용해서는 안된다.

Bootstrap Layout : container, row, col
container : 콘텐츠를 감싸는 요소, Grid 시스템의 필수 요소

row : container 내에서 컬럼들을 감싸는 요소

column : 실제 콘텐츠가 배치되는 영역
	그리드 레이아웃 구성시 반드시 .row를 먼저 배치하고, 그 내부에 column을 배치하도록 한다.
	부트스트랩은 콘텐츠 표시를 위해 12 Column Grid 시스테을 사용
	컬럼 지정을 위한 기본 형식 -> .col-화면종류-컬럼개수

column 균등 분할
- 화면종류, 컬럼개수를 지정하지 않으면 자동으로 레이아웃을 맞춤

column 화면-컬럼 지정 분할
- 화면종류, 컬럼개수를 지정하여 특정 화면 크기의 장치에 사용할 컬럼의 비율을 지정할 수 있음

Bootstrap Layout : 특정 화면 크기에서 화면 요소 표시/감춤
- 특정 화면 크기의 장비에서 화면 출력 여부를 제어할 수 있다.
----------------------------------------------------------
속성			설명
----------------------------------------------------------
.d-none		화면에서 공간 점유를 해제(감춤)
----------------------------------------------------------
.d-inline		요소를 인라인 레벨로 표시
----------------------------------------------------------
.d-block		요소를 블록 레벨로 표시
----------------------------------------------------------
.d-sm-none	작은 화면일 떄 요소를 감춤
----------------------------------------------------------
.d-sm-block	작은 화면일 떄 블록 레벨로 표시
----------------------------------------------------------
.d-md-non	중간 화면일 때 요소를 감춤
----------------------------------------------------------
.d-md-block	중간 화면일 떄 블록 레벨로 표시
----------------------------------------------------------

Components : Button
컴포넌트 : 웹 제작에 자주 사용하는 요소들의 CSS를 미리 정의해 둔 것
	 https://getbootstrap.com/docs/4.3/components/
	 일부 컴포넌트들은 단순히 CSS 뿐만 아니라 jQuery 및 boostrap.js와 함께 추가 기능을 수행하기도 한다.

Button 컴포넌트
- 입력 폼, 대화상자 등에서 행동 혹은 기능을 수행하는 컴포넌트
- 기본적으로는 <button> 태그를 위해 만들어진 컴포넌트이지만 , a, input 등의 요소에소 적용할 수 있음
- 기본클래스 : .btn
- 보조클래스 : 버튼의 용도, 사이즈 등 버튼을 다양하게 꾸미기 위한 보조클래스가 있음

용도에 따른 버튼 스타일의 지정
- 적용 클래스 규칙 -> class="btn btn-용도"
		ex) <button type="button" class="btn btn-outline-primary">Primary</button>
		     <button type="button" class="btn btn-outline-secondary">Secondary</button>

버튼의 크기 지정
- 별도의 CSS를 이용하여 픽셀 단위로 사이즈를 지정할 수도 있지만, 부스스트랩이 지정한 크기를 지정할 수도 있음

Alert 컴포넌트
- 사용자에게 피드백을 전달하기 위한 메시지 표시 상자
- 기본클래스 : .alert
- 보조클래스 : 피드백 메시지의 용도를 지정하기 위한 다양한 보조 클래스들
- alert 내에 링크를 포함하려면 a 태그에 .alert-link 클래스를 부여하면 좋음
- alert 버튼에 닫기 버튼 및 기능 추가

Modal 컴포넌트
- 응용 프로그램이 사용자에게 메시지를 표시해주거나, 입력 값을 받는 등 사용자와 다양한 인터렉션을 제공하기 위한 컴포넌트

NavBar 컴포넌트
- 사이트 상단에서 메인 메뉴로 활용
- 화면이 넓을 때는 모든 내용이 표시되지만, 표시할 영역이 마땅치 않을 때는 숨기고 사용자가 터치할 때(사용자가 필요로 할 때) 화면에 표시해 주는 편리한 메뉴 기능을 손쉽게 구현할 수 있다.
- 기본 클래스 : .navbar (nav) 태그로 작성한다.
- 어두운 배경에 어울리는 내비게이션 바는 .navbar-dark로, 그렇지 않은 경우는 생략한다.

Navbar Toggler Sub Component
- 화면 사이즈가 줄어들 때 메뉴를 축약해 표시하는 클래스

Navbar Collapse Sub Component
- 네이게이션 바 중, 나타났다 사라졌다 할 부분에 .collapse와 .navbar-collapse 클래스 적용
- 실제 메뉴 아이템에는 nav-item 적용
- .mr-auto

anaconda Prompt에서 환경을 생성
conda create -n pyweb python=3.8 openssl

빈 폴더를 열어서 visual studio code 에서 폴더 열기
Ctrl + Shift + P
	>Python: Select Interpreter
		pyenv 선택
	터미널 > 새터미널
